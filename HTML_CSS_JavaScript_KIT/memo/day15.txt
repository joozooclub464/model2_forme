자바 스크립트(Javascript)
	웹의 동작을 구현하기 위한 언어
	웹 브라우저에 자바스크립트 인터프리터가 내장 // -> 인터프리터언어
	객체 기반의 스크립트 언어
	
자바 스크립트의 특징
	자바 스크립트는 동적이며, 타입을 명시할 필요가 없는 인터프리터 언어이다.
	객체 지향형 프로그래밍과 함수형 프로그래밍을 모두 표현할 수 있다.
	HTML의 내용, 속성, 스타일 등을 변경할 수 있다.
	
자바 스크립트의 선언
	[과거]
	<script language="javascript">
		//자바스크립트 문법으로 해석
	</script>

	[현재]
	<script>
		//자바스크립트 문법으로 해석
	</script>

	<script src="경로/파일명.js"></script>

자바 스크립트 출력
	document.write()			<body>
	window.alert()				대화상자
	HTML DOM요소를 이용한 innerHTML 프로퍼티	<body>
	
	console.log()				console창

주의사항
	;(세미콜론)을 생략 가능하다.
	스크립트의 태그 위치는 어디든 상관없다 //앵간하면 body 밑에
	대소문자를 구분한다.

변수
	저장공간

변수의 선언
	var 변수명 = 값
	
	var num
	num = 10

	data = 10
	var data

	let 변수명 = 값
	const 변수명 = 값

자료형(타입)
	숫자(Number)
		정수와 실수를 구분하지 않는다.
	문자열(String)
		큰 따옴표와 작은 따옴표의 차이가 없다.
	불린(Boolean)
		true / false
	객체(Object)
		여러 변수 혹은 메소드를 선언한 집합의 주소를 가지는 타입이다.
		필드 접근시 .(마침표)를 사용한다.
	undefined
		타입이 정해지지 않은 것을 의미하는 값이다.
		let num;
		num = ??? //내가 대입연산자를 이용해서 뭔가 넣어주지 않았을 떄 들어가는 값
	null
		주소값이 정해지지 않은 것을 의미하는 값이다. (null로 변소를 초기화한 경우)
		let num = null;
형변환
	자바 스크립트의 변수는 타입이 정해져 있지 않으며, 같은 변수에 
	다른 타입의 값을 다시 대입할 수도 있다.
	(typeof 값) --> 뒤에 오는 값의 타입
	
	자동 형변환
		다른 타입의 값이 오면, 자동으로 타입을 변환하여 사용한다.
		(자바 스크립트를 자동 형변환을 많이 사용한다)
		
		let s1 = "20"
		let s2 = "10"
		
		s1+s2	"2010"
		s1-s2	10
	
	강제 형변환
		자동으로 타입 변화를 지원하지만 명시적으로 변환할 필요가 있을 때 사용
		
		Number(값)
		String(값)
		Object(값)
		Boolean(값)
		parseInt(값)	문자열 정수로
		parseFloat(값)	문자열 실수로
------------------------------------------------------------------------------
let 과 const
	var는 같은 이름의 변수를 선언할 수 있다.	
	var는 지역변수와 전역변수의 구별이 되지 않는다.
	이러한 암묵적인 오류 허용을 하기 싫다면 <script> 바로 아래에
	'use strict'를 작성하면 엄격모드로 코딩을 한다.

	스코프(scope) 호이스팅(hoisting)

		스코프
			변수에 접근할 수 있는 범위, 변수의 생명주기,
			변수의 유효범위	{  }	

		호이스팅
			변수(var)나 함수 선언이 어디에 있든 상관없이 다른 코드보다 
			가장 먼저 실행되는 특징 //static과 비슷한 개념
			
			var num = 10
			선언 단계		공간 확보
			초기화 단계	undefined 넣기
			할당 단계		10이 대입

	let	: 재할당(대입) 가능
	const	: 재할당 불가능 //const는 상수라는 뜻
		
		let a = 'test'
		let a = 'hello'		--> 오류 //Be) 재할당이 아닌 재선언 초기화기 때문에 오류 발생
		a = 'banana'		--> 가능 //Be) 재할당이므로 정상 실행
	
		const b = 'test'
		const b = 'hello'	--> 오류
		b = 'banana'		--> 오류 //Be) 재할당도 불가하므로 오류 발생
						//객체로 많이 사용함.
















