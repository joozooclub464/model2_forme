객체
	추상적인 개념이 실체화된 것
	프로퍼티들로 이루어진 하나의 집합

객체 선언
	const 객체명 = {
		프로퍼티1명:프로퍼티1값,
		프로퍼티2명:프로퍼티2값,
		...
		함수명:function() {
		
		}
	}

생성자를 이용한 객체 생성
	//일종의 함수라고 봐야 함.
	
	function 생성자명(매개변수1, 매개변수2, ...) {
		this.변수명 = 값1;
		this.변수명 = 값2;
		...
		this.함수명 = 함수(){ };
	}
	
	const 객체명 = new 생성자명(값1, 값2, ...);
	
	//ie) 클래스만 생성하지 않고 ....영상보고다시필기

상속(inheritance)
	자바 스크립트는 객체간의 상속이 일어난다.
	자바 스크립트의 모든 객체는 프로토타입이라는 객체를 포함,
	모든 객체는 프로토타입으로부터 프로퍼티와 메소드를 상속받는다.
	
프로토타입 기반
	prototype
	: 초기모델
	
	const mycar = new Car();

	Car.prototype
	      ↓
	    mycar

	프로토타입 기반 언어는 클래스라는 개념이 없고, 객체에서 객체를
	바로 상속받을 수 있다. 따라서 자바스크립트는 현재 존재하고 있는
	객체를 프로토타입으로 사용하며 해당 객체를 복제 후 재사용한다.

Window객체
	웹 브라우저의 창(Window)을 나타내는 객체로, 대부분의 웹 브라우저에서 지원한다. //비표준객체이므로 안되는 곳도 있을 수 있음.
	자바스크립트의 모든 객체, 전역함수, 전역변수들은 자동으로 window객체의 
	프로퍼티가 되고 window객체의 메소드는 전역함수, window객체의 프로퍼티는
	전역변수가 된다.

window.onload
	window.onload = function() {
		문서가 로딩된 이후에 호출할 문장
	}

	스크립트 언어는 위에서 아래로 해석되기 때문에 DOM에서 HTML요소를 추출할 때
	body보다 위에 있다면 해석 순서에서 문제가 생길 수 있다. 이 경우 자바스크립트
	문서를 밑으로 옮겨야 하는데, html 문서가 길어지면 가독성도 좋지 않고 불편하다.
	따라서 문서가 다 준비된 상황 이후에 발동하게끔 하는 역할을 한다.

window.open()
	새로운 브라우저 창을 열 수 있으며, 새로운 창의 세부적인 옵션들도 설정할 수 있다.
	
	//객체가 담고 있는 것 : 새롭게 열린 브라우저 창
	let 객체명 = window.open(url,name,specs,replace);

	url	: 열어줄 주소
	name	: 열리는 창의 이름
			_blank	: 새 창에서 열림
			blank	: blank라는 이름의 창에서 열림 
			_child	: 자식 프레임
			_parent	: 부모 프레임
			_self	: 현재 창에서 열림
	specs	: 선택적인 값으로 창의 크기, 스크롤 여부, 리사이즈 등등을 지정
	replace	: 히스토리 목록에 새 항목을 만들지, 현재 항목을 대체할지 지정한다.
		true : 현재 히스토리 대체 / false : 새 항목
	

